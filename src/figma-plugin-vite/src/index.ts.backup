// Temporary type definitions - will be properly imported later
interface CommandProgressUpdate {
  type: 'command_progress';
  commandId: string;
  commandType: string;
  status: 'started' | 'in_progress' | 'completed' | 'error';
  progress: number;
  totalItems: number;
  processedItems: number;
  message: string;
  timestamp: number;
  currentChunk?: number;
  totalChunks?: number;
  chunkSize?: number;
  payload?: { currentChunk?: number; totalChunks?: number; chunkSize?: number; [key: string]: unknown } | null;
}

type FigmaCommand = 
  | 'get_document_info'
  | 'get_selection'
  | 'read_my_design'
  | 'get_node_info'
  | 'get_nodes_info'
  | 'create_rectangle'
  | 'create_frame'
  | 'create_text'
  | 'move_node'
  | 'resize_node'
  | 'clone_node'
  | 'delete_node'
  | 'delete_multiple_nodes'
  | 'set_fill_color'
  | 'set_stroke_color'
  | 'set_corner_radius'
  | 'get_styles'
  | 'get_local_components';

// Declare figma global - will be properly typed later
declare const figma: any;
declare const __html__: string;

// Import component functions
import { generateCommandId } from './components/utils';
import { 
  getDocumentInfo, 
  getSelection, 
  readMyDesign, 
  getNodeInfo, 
  getNodesInfo 
} from './components/document';
import { 
  createRectangle, 
  createFrame, 
  createText, 
  moveNode, 
  resizeNode, 
  cloneNode, 
  deleteNode, 
  deleteMultipleNodes 
} from './components/creation';
import { 
  setFillColor, 
  setStrokeColor, 
  setCornerRadius, 
  getStyles, 
  getLocalComponents 
} from './components/styling';

// Plugin state interface
interface PluginState {
  serverPort: number;
}

// Plugin state
const state: PluginState = {
  serverPort: 3055, // Default port
};

// Show UI with larger size for testing
figma.showUI(__html__, { width: 400, height: 600 });

// Helper function for progress updates
function sendProgressUpdate(
  commandId: string,
  commandType: string,
  status: 'started' | 'in_progress' | 'completed' | 'error',
  progress: number,
  totalItems: number,
  processedItems: number,
  message: string,
  payload: { currentChunk?: number; totalChunks?: number; chunkSize?: number; [key: string]: unknown } | null = null
): CommandProgressUpdate {
  const update: CommandProgressUpdate = {
    type: 'command_progress',
    commandId,
    commandType,
    status,
    progress,
    totalItems,
    processedItems,
    message,
    timestamp: Date.now(),
  };

  // Add optional chunk information if present
  if (payload) {
    if (payload.currentChunk !== undefined && payload.totalChunks !== undefined) {
      update.currentChunk = payload.currentChunk;
      update.totalChunks = payload.totalChunks;
      update.chunkSize = payload.chunkSize;
    }
    update.payload = payload;
  }

  // Send to UI
  figma.ui.postMessage(update);
  console.log(`Progress update: ${status} - ${progress}% - ${message}`);

  return update;
}

// Enhanced command handler with all migrated functions
async function handleCommand(command: FigmaCommand, params?: any): Promise<unknown> {
  const commandId = generateCommandId();
  
  try {
    sendProgressUpdate(commandId, command, 'started', 0, 1, 0, `Starting ${command}...`);
    
    let result: unknown;
    
    switch (command) {
      // Document & Selection
      case 'get_document_info':
        result = await getDocumentInfo();
        break;
      case 'get_selection':
        result = await getSelection();
        break;
      case 'read_my_design':
        result = await readMyDesign();
        break;
      case 'get_node_info':
        result = await getNodeInfo(params.nodeId);
        break;
      case 'get_nodes_info':
        result = await getNodesInfo(params.nodeIds);
        break;
        
      // Creation & Modification
      case 'create_rectangle':
        result = await createRectangle(params);
        break;
      case 'create_frame':
        result = await createFrame(params);
        break;
      case 'create_text':
        result = await createText(params);
        break;
      case 'move_node':
        result = await moveNode(params);
        break;
      case 'resize_node':
        result = await resizeNode(params);
        break;
      case 'clone_node':
        result = await cloneNode(params);
        break;
      case 'delete_node':
        result = await deleteNode(params);
        break;
      case 'delete_multiple_nodes':
        result = await deleteMultipleNodes(params);
        break;
        
      // Styling & Appearance
      case 'set_fill_color':
        result = await setFillColor(params);
        break;
      case 'set_stroke_color':
        result = await setStrokeColor(params);
        break;
      case 'set_corner_radius':
        result = await setCornerRadius(params);
        break;
      case 'get_styles':
        result = await getStyles();
        break;
      case 'get_local_components':
        result = await getLocalComponents();
        break;
        
      default:
        throw new Error(`Command not implemented: ${command}`);
    }
    
    sendProgressUpdate(commandId, command, 'completed', 100, 1, 1, `Completed ${command}`);
    return result;
    
  } catch (error: any) {
    sendProgressUpdate(commandId, command, 'error', 0, 1, 0, `Error in ${command}: ${error.message}`);
    throw error;
  }
}

// UI message handler
figma.ui.onmessage = async (msg: any) => {
  switch (msg.type) {
    case 'test-command':
      try {
        console.log(`üöÄ Executing command: ${msg.command}`, msg.params);
        const result = await handleCommand(msg.command, msg.params);
        
        figma.ui.postMessage({
          type: 'command-result',
          id: msg.id,
          result,
        });
        
        console.log(`‚úÖ Command completed: ${msg.command}`, result);
        figma.notify(`‚úÖ ${msg.command} executed successfully`);
      } catch (error: any) {
        console.error(`‚ùå Command failed: ${msg.command}`, error);
        
        figma.ui.postMessage({
          type: 'command-error',
          id: msg.id,
          error: error.message,
        });
        
        figma.notify(`‚ùå Error: ${error.message}`);
      }
      break;
    case 'notify':
      figma.notify(msg.message);
      break;
    case 'close-plugin':
      figma.closePlugin();
      break;
  }
};

// Initialize plugin
(async function initializePlugin() {
  try {
    const savedSettings = await figma.clientStorage.getAsync('settings');
    if (savedSettings && savedSettings.serverPort) {
      state.serverPort = savedSettings.serverPort;
    }

    // Send initial settings to UI
    figma.ui.postMessage({
      type: 'init-settings',
      settings: {
        serverPort: state.serverPort,
      },
    });
    
    figma.notify('üöÄ MCP Plugin initialized');
    console.log('üé® Figma Plugin initialized with components');
  } catch (error: any) {
    console.error('Error loading settings:', error);
  }
})(); 