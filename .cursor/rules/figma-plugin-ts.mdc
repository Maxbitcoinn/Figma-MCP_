---
description: 
globs: 
alwaysApply: true
---
# Figma Plugin Development Rules

## Project Context
This is a TypeScript-based Figma plugin project with WebSocket communication to an MCP server. The plugin provides a tabbed interface for various Figma operations including document management, element creation, text manipulation, and auto-layout controls.

## Core Development Principles

### Figma Plugin Environment Constraints
- **CRITICAL**: Figma plugins do NOT support modern JavaScript syntax
- **FORBIDDEN SYNTAX**:
  - Spread operator (`...array`, `{...object}`)
  - Optional chaining (`object?.property`)
  - Nullish coalescing (`value ?? fallback`)
  - Destructuring with rest parameters
  - Arrow functions in certain contexts
  - Template literals in some cases

### Safe Alternative Patterns
- Use `array.slice()` and `array.push()` instead of spread operator
- Use explicit conditional checks instead of optional chaining
- Use `value !== undefined ? value : fallback` instead of nullish coalescing
- Use traditional for loops or Array methods like `forEach`, `map`

## TypeScript Standards

### Type Safety
- Always use explicit types for function parameters and return values
- Use proper interface definitions from `types/types.ts`
- Avoid `any` type - use proper union types or interfaces instead
- Use type guards for runtime type checking

### Interface Usage
- Extend base interfaces (`BaseNodeParams`, `BasePositionParams`, etc.) when possible
- Use enum types for consistent string literals
- Define parameter interfaces for all service methods
- Use explicit parameter mapping: `const params: InterfaceName = { field1: value1, field2: value2 }`

## Code Organization

### Service Architecture
- Keep services in `src/services/` directory (flat structure, no subfolders)
- Each service should handle a specific domain (Creation, Text, Layout, etc.)
- Use dependency injection pattern for service communication
- Implement proper error handling with try-catch blocks

### File Structure
```
src/
├── services/           # Service classes (flat structure)
├── components/         # React components
├── utils/             # Utility functions
├── types/             # TypeScript interfaces
└── index.ts           # Main plugin entry point
```

### Import Conventions
- Use relative imports for project files
- Import types explicitly: `import { TypeName } from '../types/types'`
- Group imports: external libraries, internal modules, types

## Error Handling

### Service Methods
- Always wrap operations in try-catch blocks
- Provide meaningful error messages with context
- Use `sendProgressUpdate` for long-running operations
- Return proper error objects with success/failure status

### Node Operations
- Always check if nodes exist before operations: `if (!node) throw new Error(...)`
- Validate node types before casting: `if (node.type !== "TEXT") throw new Error(...)`
- Handle font loading failures gracefully
- Use type guards for safe node type checking

## UI Development

### React Components
- Use functional components with TypeScript
- Implement proper state management with useState/useEffect
- Use CSS modules or SCSS for styling
- Ensure responsive design for different screen sizes

### Tab Interface
- Maintain consistent tab structure across components
- Use proper event handling for form inputs
- Implement loading states and error feedback
- Provide clear user feedback for operations

## Performance Optimization

### Chunking Strategy
- Use chunking for operations on large datasets (default: 10 items per chunk)
- Implement progress tracking with `sendProgressUpdate`
- Add delays between chunks to prevent UI freezing
- Provide cancellation mechanisms for long operations

### Memory Management
- Clean up event listeners and timeouts
- Avoid memory leaks in recursive operations
- Use efficient data structures for large collections
- Implement proper cleanup in useEffect hooks

## Communication Patterns

### WebSocket Integration
- Use proper message structure with commandId tracking
- Implement retry logic for failed operations
- Handle connection state changes gracefully
- Provide offline fallback mechanisms

### Progress Reporting
- Send progress updates for operations taking >1 second
- Include meaningful progress messages
- Provide estimated completion times when possible
- Handle progress cancellation requests

## Testing Guidelines

### Unit Testing
- Test service methods in isolation
- Mock Figma API calls appropriately
- Test error conditions and edge cases
- Validate type safety in tests

### Integration Testing
- Test WebSocket communication flows
- Verify UI component interactions
- Test cross-service dependencies
- Validate end-to-end workflows

## Documentation Standards

### Code Comments
- Document complex algorithms and business logic
- Explain Figma-specific constraints and workarounds
- Provide usage examples for service methods
- Document breaking changes and migration paths

### API Documentation
- Document all public service methods
- Include parameter descriptions and examples
- Specify error conditions and return types
- Provide integration examples

## Specific Figma Plugin Guidelines

### Font Handling
- Always load fonts before setting text: `await figma.loadFontAsync(fontName)`
- Handle mixed fonts in text nodes properly
- Provide fallback fonts for missing typefaces
- Use proper font weight mapping (400 = Regular, 700 = Bold)

### Node Manipulation
- Use async operations for node creation and modification
- Implement proper parent-child relationships
- Handle auto-layout constraints correctly
- Validate node properties before setting

### Layout Operations
- Understand auto-layout hierarchy and constraints
- Use proper alignment and sizing modes
- Handle padding and spacing calculations
- Implement responsive layout patterns

## Response Format

When providing code suggestions or fixes:
1. Always check for Figma plugin compatibility
2. Use explicit type annotations
3. Implement proper error handling
4. Follow the established service patterns
5. Include progress tracking for long operations
6. Provide clear commit messages for changes

## Example Response Pattern
```typescript
// ✅ Good: Figma-compatible syntax
const items: ItemType[] = [];
for (const item of sourceArray) {
  items.push(item);
}

// ❌ Bad: Uses forbidden spread operator
const items = [...sourceArray];
```

Always prioritize code that works in the Figma plugin environment over modern JavaScript conveniences.

@src/types/types.ts
@src/utils/common.ts
